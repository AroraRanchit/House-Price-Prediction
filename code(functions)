import pandas as pd
import numpy as np
import joblib
from xgboost import XGBRegressor
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error, r2_score


# === 1. Extract Data ===
def extract_data(file_path, sheet='Sheet1'):
    return pd.read_excel(file_path, sheet_name=sheet)

# === 2. Exploratory Data Processing (EDP) ===
def exploratory_data_processing(df):
    df = df.drop(columns=['Id'], errors='ignore')
    df = df.dropna(subset=['SalePrice'])

    Q1 = df['SalePrice'].quantile(0.25)
    Q3 = df['SalePrice'].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    df = df[(df['SalePrice'] >= lower) & (df['SalePrice'] <= upper)]

    return df

# === 3. Preprocess Features ===
def preprocess_features(df):
    X = df.drop(columns=['SalePrice'])
    y = df['SalePrice']

    numeric_cols = X.select_dtypes(include=['number']).columns.tolist()
    categorical_cols = X.select_dtypes(include=['object']).columns.tolist()

    numeric_transformer = SimpleImputer(strategy='mean')
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('encoder', OneHotEncoder(handle_unknown='ignore'))
    ])

    preprocessor = ColumnTransformer(transformers=[
        ('num', numeric_transformer, numeric_cols),
        ('cat', categorical_transformer, categorical_cols)
    ])

    return X, y, preprocessor

# === 4. Calculate MAPE ===
def calculate_mape(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

# === 5. Train and Evaluate Model ===
def train_and_evaluate_model(X, y, preprocessor, model_path='house_price_model_xgboost.pkl'):
    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=4, random_state=42))
    ])

    pipeline.fit(X, y)
    joblib.dump(pipeline, model_path)

    predictions = pipeline.predict(X)
    mse = mean_squared_error(y, predictions)
    r2 = r2_score(y, predictions)
    mape = calculate_mape(y, predictions)

    log_results(predictions, y, mse, r2, mape, model_path)
    save_predictions(X, y, predictions, filename='predicted_vs_actual_xgboost.csv')

    return pipeline

# === 6. Print Logging Function ===
def log_results(predictions, y_true, mse, r2, mape, model_path):
    print("\n=== Predicted vs Actual Prices ===")
    for i, (pred, actual) in enumerate(zip(predictions[:9], y_true[:9])):
        print(f"Row {i+1}: Predicted: ${pred:,.2f} | Actual: ${actual:,.2f}")

    print(f"\n📊 Mean Squared Error (MSE): {mse:,.2f}")
    print(f"📏 Mean Absolute Percentage Error (MAPE): {mape:.2f}%")
    print(f"✅ R² Score (Accuracy): {r2 * 100:.2f}%")
    print(f"💾 Model saved to '{model_path}'")

# === 7. Save Predictions to CSV ===
def save_predictions(X, y, predictions, filename='predictions.csv'):
    df_result = X.copy()
    df_result['ActualPrice'] = y.values
    df_result['PredictedPrice'] = predictions
    df_result.to_csv(filename, index=False)
    print(f"📁 Predictions saved to '{filename}'")

# === 8. Predict on New External Data (Optional) ===
def predict_price(new_data_path, model_path='house_price_model_xgboost.pkl'):
    model = joblib.load(model_path)
    new_df = pd.read_excel(new_data_path)
    predictions = model.predict(new_df)

    print("\n🔮 Predicted Prices for New Data:")
    for i, price in enumerate(predictions):
        print(f"Row {i+1}: ${price:,.2f}")

    return predictions

# === 9. Main Execution ===
if __name__ == "__main__":
    file_path = 'HousePricePrediction.xlsx'

    # Step 1: Load first 1461 rows
    df = extract_data(file_path)
    df = df.iloc[:1461]

    # Step 2: Clean and remove outliers
    df = exploratory_data_processing(df)

    # Step 3: Prepare features
    X, y, preprocessor = preprocess_features(df)

    # Step 4: Train and evaluate XGBoost model on full data
    model = train_and_evaluate_model(X, y, preprocessor)

    # Optional: predict_price('NewHouseData.xlsx')
